<?php
/**
 * @package Contentshelf Shopping Cart
 * @version  1.0.0
 */
/*
 * Plugin Name: Content Shelf Shopping Cart
 * Plugin URI: http://contentshelf.com
 * Description: Content Shelf is shopping cart software for selling digital content, tangible products, services, subscriptions and gift cards.
 * Version: 1.0.0
 * Author: ContentShelf.com
 * Author URI: http://contentshelf.com
 * Contributors: contentshelf
 * License: GPLv2 or later
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 * Contributors: contentshelf
 */

define( 'WP_DEBUG', true );

/*
 * @global constant CONTENTSHELF_PLUGIN_VERSION - plugin version.
 */
define('CONTENTSHELF_PLUGIN_VERSION', '1.0.0');

/*
 * @global constant CONTENTSHELF_DEMO_STORE_ID - A default value for the contentshelf_store_id setting.
 */
if ( ! defined( 'CONTENTSHELF_DEMO_STORE_ID' ) ) {
    define( 'CONTENTSHELF_DEMO_STORE_ID', 'S151016000000715' );
}

/*
 * @global constant CONTENTSHELF_DEMO_STORE_URL - A default value for the contentshelf_store_url setting.
 */
if ( ! defined( 'CONTENTSHELF_DEMO_STORE_URL' ) ) {
    define( 'CONTENTSHELF_DEMO_STORE_URL', 'store-widget-demo.contentshelf.com' );
}

/*
 * @global constant CONTENTSHELF_PLUGIN_DIR - The path to the Content Shelf Plugin base directory.
 */
if ( ! defined( 'CONTENTSHELF_PLUGIN_DIR' ) ) {
    define( 'CONTENTSHELF_PLUGIN_DIR', plugin_dir_path( realpath(__FILE__) ) );
}

/*
 * @global constant CONTENTSHELF_CSS_DIR - The path to the Content Shelf Plugin CSS directory.
 */
if ( ! defined( 'CONTENTSHELF_CSS_DIR' ) ) {
    define( 'CONTENTSHELF_CSS_DIR', CONTENTSHELF_PLUGIN_DIR . DIRECTORY_SEPARATOR . 'css');
}

/*
 * @global constant CONTENTSHELF_IMAGE_DIR - The path to the Content Shelf Plugin Image directory.
 */
if ( ! defined( 'CONTENTSHELF_IMAGE_DIR' ) ) {
    define( 'CONTENTSHELF_IMAGE_DIR', CONTENTSHELF_PLUGIN_DIR . DIRECTORY_SEPARATOR . 'image');
}

/*
 * @global constant CONTENTSHELF_JS_DIR - The path to the Content Shelf Plugin Image directory.
 */
if ( ! defined( 'CONTENTSHELF_JS_DIR' ) ) {
    define( 'CONTENTSHELF_JS_DIR', CONTENTSHELF_PLUGIN_DIR . DIRECTORY_SEPARATOR . 'js');
}


/*
 *  Include all of the Content Shelf widget classes.
 */
require_once CONTENTSHELF_PLUGIN_DIR . 'includes' . DIRECTORY_SEPARATOR . 'contentshelf-cart-count-widget.php';
require_once CONTENTSHELF_PLUGIN_DIR . 'includes' . DIRECTORY_SEPARATOR . 'contentshelf-language-widget.php';
require_once CONTENTSHELF_PLUGIN_DIR . 'includes' . DIRECTORY_SEPARATOR . 'contentshelf-search-widget.php';

/*
 * @method contentshelf_get_template
 *
 * This method executes the provided template with the input variables provided
 * as template parameters.
 *
 * This method depends on the global constant CONTENTSHELF_PLUGIN_DIR.
 *
 * @param string $template_file - Template file name and path located in CONTENTSHELF_TEMPLATE_DIR.
 * @param array $template_params - Array of variables provided to the template.
 * @return string - Output generated by the parsed template.  Default empty string on error.
 */
function contentshelf_get_template($template_file, $template_params=array()) {
    ob_start(); // start output buffer
    $file = CONTENTSHELF_PLUGIN_DIR . DIRECTORY_SEPARATOR . $template_file;
    if ( ! is_file($file) ) {
        error_log(sprintf('[%s] Invalid template file: %s', __FUNCTION__, $template_file) . PHP_EOL, 3, get_contentshelf_admin_log());
        return '';
    }

    extract($template_params); // see PHPDoc

    include $file;
    $template = ob_get_contents(); // get contents of buffer
    ob_end_clean();
    return $template;
}

/*
 *  Getter function .  Utility function go retrieve the Content Shelf Store ID to be used for rendering content.
 *  Returns CONTENTSHELF_DEMO_STORE_ID by default when the setting has not yet been stored.
 *  @return string - Content Shelf Store ID setting.
 */
function get_contentshelf_store_id() {
    $plugin_options = get_option('contentshelf_plugin_options');
    if ( empty($plugin_options['contentshelf_store_id']) ) {
        return CONTENTSHELF_DEMO_STORE_ID;
    }
    return $plugin_options['contentshelf_store_id'];
}

/*
 *  Getter function .  Utility function go retrieve the Content Shelf Store URL to be used for rendering content.
 *  Returns CONTENTSHELF_DEMO_STORE_URL by default when the setting has not yet been stored.
 *  @return string - Content Shelf Store ID setting.
 */
function get_contentshelf_store_url() {
    $plugin_options = get_option('contentshelf_plugin_options');
    if ( empty($plugin_options['contentshelf_store_url']) ) {
        return CONTENTSHELF_DEMO_STORE_URL;
    }
    return $plugin_options['contentshelf_store_url'];
}

/*
 *  Utility function to get the full path of the store directory.
 *  @return string - Full filesystem path to the store directory created in the wp-content folder.
 */
function get_contentshelf_store_dir() {
    $store_dir = WP_CONTENT_DIR . DIRECTORY_SEPARATOR . 'store';
    return $store_dir;
}

/*
 *  Utility function to get the full path of the log directory.
 *  @return string - Full filesystem path to the log directory created in the wp-content folder.
 */
function get_contentshelf_log_dir() {
    $log_dir = WP_CONTENT_DIR . DIRECTORY_SEPARATOR . 'logs';
    return $log_dir;
}

/*
 *  Utility function to get the full path to the default admin log file.
 *  @return string - Full filesystem path to the Content Shelf admin log file.
 */
function get_contentshelf_admin_log() {
    $admin_log = sprintf('%s%scontentshelf_debug.log', get_contentshelf_log_dir(), DIRECTORY_SEPARATOR);
    return $admin_log;
}

/*
 * @method contentshelf_add_store_page
 *
 * This method creates/reinstates the store page for Content Shelf and
 * stores the page_title, page_name and page_id as options for reference..
 *
 * This method depends on template file: templates/contentshelf-admin-store-page.php
 *
 */
function contentshelf_add_store_page() {
    global $wpdb;

    $the_page_title = __('Store', 'contentshelf-store-page');
    $the_page_name = __('Store', 'contentshelf-store-page');

    // the menu entry...
    delete_option("contentshelf_page_title");
    add_option("contentshelf_page_title", $the_page_title, '', 'yes');
    // the slug...
    delete_option("contentshelf_page_name");
    add_option("contentshelf_page_name", $the_page_name, '', 'yes');

    $store_page_id = get_option("contentshelf_store_page_id");
    $the_page = false;

    if ( ! empty($store_page_id) && $store_page_id > 0 ) {
        $the_page = get_post($store_page_id);
    }

    $admin_store_page_content = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-admin-store-page.php', compact('plugin_options', 'store_options'));
    if ( ! $the_page ) {
        // Create post object
        $_p = array();
        $_p['post_title'] = $the_page_title;
        $_p['post_content'] = $admin_store_page_content;
        $_p['post_status'] = 'publish';
        $_p['post_type'] = 'page';
        $_p['comment_status'] = 'closed';
        $_p['ping_status'] = 'closed';
        $_p['post_category'] = array(1); // the default 'Uncategorized'

        // Insert the post into the database
        $the_page_id = wp_insert_post( $_p );
        delete_option("contentshelf_store_page_id");
        add_option( 'contentshelf_store_page_id', $the_page_id, '', 'yes' );
    } else {
        // the plugin may have been previously active and the page may just be trashed...
        $the_page_id = $the_page->ID;
        $the_page->post_content = $admin_store_page_content;

        //make sure the page is not trashed...
        $the_page->post_status = 'publish';
        $the_page_id = wp_update_post( $the_page );
        delete_option("contentshelf_store_page_id");
        add_option("contentshelf_store_page_id", $the_page_id, '', 'yes');
    }
}

/*
 * @method contentshelf_delete_store_page
 *
 * This method trashes the store page for Content Shelf and
 * deletes the options for page_title, page_name and page_id.
 *
 * This method depends on template file: templates/contentshelf-admin-store-page.php
 *
 */
function contentshelf_delete_store_page() {
    global $wpdb;

    $store_page_id = get_option("contentshelf_store_page_id");
    $the_page = false;

    if ( ! empty($store_page_id) && $store_page_id > 0 ) {
        $the_page = get_post($store_page_id);
    }

    if( $the_page ) wp_delete_post( $the_page->ID ); // this will trash, not delete
    delete_option("contentshelf_page_title");
    delete_option("contentshelf_page_name");
    delete_option("contentshelf_store_page_id");
}

/*
 * @method contentshelf_add_action_links
 *
 * This method either displays a link for Plugin Setup or an
 * alternate link to the Plugin Settings page when setup is completed.
 *
 *
 *@return array - Links added to the Plugin action links.
 */
function contentshelf_add_action_links ( $links ) {
    $output = $links;
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_id = empty($plugin_options['contentshelf_store_id']) ? false : trim($plugin_options['contentshelf_store_id']);
    $store_url = empty($plugin_options['contentshelf_store_url']) ? false : trim($plugin_options['contentshelf_store_url']);

    $is_setup = ( isset($plugin_options['contentshelf_store_id']) && isset($plugin_options['contentshelf_store_url']) );
    if ( ! $is_setup ) {
         $output[] = '<a href="' . admin_url( 'admin.php?page=contentshelf' ) . '">Setup</a>';
    } else {
         $output[] = '<a href="' . admin_url( 'admin.php?page=contentshelf-store-settings' ) . '">Settings</a>';
    }
    return $output;
}

/*
 * @method contentshelf_wrap_shortcode_content
 *
 * This method wraps the provided content string in a
 * Content Shelf HTML comment with a label containing the shortcode name.
 *
 *@param string $content - The content to be enclosed with the wrapper.
 *@param string $name - The shortcode name
 *@param array $attrs - The shortcode attributes
 *@return string - Wrapped content.
 */
function contentshelf_wrap_shortcode_content($content, $name, $attrs)
{
    return "<!-- Content Shelf Store plugin v " . CONTENTSHELF_PLUGIN_VERSION . " " . $name . " --><!-- noptimize -->"
           . "$content"
           . "<!-- /noptimize --><!-- END Content Shelf Store v " . CONTENTSHELF_PLUGIN_VERSION . " -->";
}

/*
 * @method contentshelf_cart_count_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_cart_count shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_cart_count_shortcode($attrs) {
    $attributes = shortcode_atts(
        array(
            'is_contentshelf_shortcode' => false,
            'lang' => 'en'
        ), $attrs
    );

    $result = '';
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');
    $is_newbie = get_contentshelf_store_id() == CONTENTSHELF_DEMO_STORE_ID;
    $show_cart_count = $is_newbie;
    if ( isset($store_options['contentshelf_show_cart_count']) ) {
        $show_cart_count = (bool) ( (int) $store_options['contentshelf_show_cart_count'] );
    }
    if ( $show_cart_count ) {
        $result = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-cart-count-include.php', compact('plugin_options', 'store_options'));
    }

    $result = apply_filters('contentshelf_cart_count_shortcode_content', $result);
    if ( is_admin() ) {
        $result = '[contentshelf_cart_count]';
    }

    if (!empty($result)) {
        $result = contentshelf_wrap_shortcode_content($result, 'cart_count', $attributes);
    }

    return $result;
}
/*
 * @method contentshelf_categories_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_categories_shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_categories_shortcode($attributes) {
    $attributes = shortcode_atts(
        array(
            'is_contentshelf_shortcode' => false,
            'lang' => 'en'
        ), $attributes
    );

    $result = '';
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');
    $is_newbie = get_contentshelf_store_id() == CONTENTSHELF_DEMO_STORE_ID;
    $show_categories = $is_newbie;
    if ( isset($store_options['contentshelf_show_categories']) ) {
        $show_categories = (bool) ( (int) $store_options['contentshelf_show_categories'] );
    }
    if ( $show_categories ) {
        $result = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-categories-include.php', compact('plugin_options', 'store_options'));
    }

    $result = apply_filters('contentshelf_categories_shortcode_content', $result);
    if ( is_admin() ) {
        $result = '[contentshelf_categories]';
    }

    if (!empty($result)) {
        $result = contentshelf_wrap_shortcode_content($result, 'categories', $attributes);
    }

    return $result;
}
/*
 * @method contentshelf_language_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_language_shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_language_shortcode($attrs) {
    $attributes = shortcode_atts(
        array(
            'is_contentshelf_shortcode' => false,
            'lang' => 'en'
        ), $attrs
    );

    $result = '';
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');
    $is_newbie = get_contentshelf_store_id() == CONTENTSHELF_DEMO_STORE_ID;
    $show_language = $is_newbie;
    if ( isset($store_options['contentshelf_show_language']) ) {
        $show_language = (bool) ( (int) $store_options['contentshelf_show_language'] );
    }
    if ( $show_language ) {
        $result = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-language-include.php', compact('plugin_options', 'store_options'));
    }

    $result = apply_filters('contentshelf_language_shortcode_content', $result);
    if ( is_admin() ) {
        $result = '[contentshelf_language]';
    }

    if (!empty($result)) {
        $result = contentshelf_wrap_shortcode_content($result, 'language', $attributes);
    }

    return $result;
}
/*
 * @method contentshelf_search_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_search_shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_search_shortcode($attrs) {
    $attributes = shortcode_atts(
        array(
            'is_contentshelf_shortcode' => false,
            'lang' => 'en'
        ), $attrs
    );

    $result = '';
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');
    $is_newbie = get_contentshelf_store_id() == CONTENTSHELF_DEMO_STORE_ID;
    $show_search = $is_newbie;
    if ( isset($store_options['contentshelf_show_search']) ) {
        $show_search = (bool) ( (int) $store_options['contentshelf_show_search'] );
    }
    if ( $show_search ) {
        $result = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-search-include.php', compact('plugin_options', 'store_options'));
    }

    $result = apply_filters('contentshelf_search_shortcode_content', $result);
    if ( is_admin() ) {
        $result = '[contentshelf_search]';
    }

    if (!empty($result)) {
        $result = contentshelf_wrap_shortcode_content($result, 'search', $attributes);
    }

    return $result;
}
/*
 * @method contentshelf_store_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_store_shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_store_shortcode($attrs) {
    $attributes = shortcode_atts(
        array(
            'is_contentshelf_shortcode' => false,
            'lang' => 'en'
        ), $attrs
    );

    $result = '';
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');
    $is_newbie = get_contentshelf_store_id() == CONTENTSHELF_DEMO_STORE_ID;
    $show_store = $is_newbie;
    if ( isset($store_options['contentshelf_show_store']) ) {
        $show_store = (bool) ( (int) $store_options['contentshelf_show_store'] );
    }
    if ( $show_store ) {
        $result = contentshelf_get_template('templates' . DIRECTORY_SEPARATOR . 'contentshelf-store-include.php', compact('plugin_options', 'store_options'));
    }

    $result = apply_filters('contentshelf_store_shortcode_content', $result);
    if ( is_admin() ) {
        $result = '[contentshelf_store]';
    }

    if (!empty($result)) {
        $result = contentshelf_wrap_shortcode_content($result, 'store', $attributes);
    }

    return $result;
}
/*
 * @method contentshelf_store_page_shortcode
 *
 * This method provides the content to be displayed for the contentshelf_store_page_shortcode.
 *
 *@param array $attrs - The shortcode attributes
 *@return string - Content to be displayed.
 */
function contentshelf_store_page_shortcode($attrs) {
    $attributes = shortcode_atts(
        array(
            'lang' => 'en'
        ), $attrs
    );

    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');

    $css_file_tpl = basename(CONTENTSHELF_PLUGIN_DIR) . DIRECTORY_SEPARATOR . 'css' . DIRECTORY_SEPARATOR . 'contentshelf-common.css';
    $css_file = plugins_url($css_file_tpl, 'contentshelf-shopping-cart');
    wp_enqueue_style('contentshelf-css', $css_file, array(), CONTENTSHELF_PLUGIN_VERSION);

    $js_file_tpl = basename(CONTENTSHELF_PLUGIN_DIR) . DIRECTORY_SEPARATOR . 'js' . DIRECTORY_SEPARATOR . 'contentshelf-common.js';
    $js_file = plugins_url($js_file_tpl, 'contentshelf-shopping-cart');
    wp_enqueue_script('contentshelf-js', $js_file, array(), CONTENTSHELF_PLUGIN_VERSION);

    $content_script = 'templates' . DIRECTORY_SEPARATOR . 'contentshelf-store-page-include.php';
    $content = contentshelf_get_template($content_script, compact('plugin_options', 'store_options'));
    $content = do_shortcode($content);
    $content = apply_filters('contentshelf_store_page_shortcode', $content);
    $content = contentshelf_wrap_shortcode_content($content, 'store', $attributes);

    return $content;
}

/*
 * @method contentshelf_options_validate
 *
 * This method sanitizes the plugin setup and store settings options upon submission.
 *
 *@param array $input - The form inputs to be sanitized.
 *@return array - Sanitized input array.
 */
function contentshelf_options_validate($input) {
    $plugin_options = get_option('contentshelf_plugin_options');
    $store_options = get_option('contentshelf_store_options');

    $new_input = array();
    if ( isset($input['contentshelf_store_id']) ) {
        $new_input['contentshelf_store_id'] = trim($input['contentshelf_store_id']);
        $new_input['contentshelf_store_url'] = filter_var(trim($input['contentshelf_store_url']), FILTER_SANITIZE_URL);
    } else {
        $new_input['contentshelf_show_cart_count'] = empty($input['contentshelf_show_cart_count']) ? 0 : 1;
        $new_input['contentshelf_show_language'] = empty($input['contentshelf_show_language']) ? 0 : 1;
        $new_input['contentshelf_show_search'] = empty($input['contentshelf_show_search']) ? 0 : 1;
    }

    return $new_input;
}

/*
 * @method contentshelf_store_id_field
 *
 * This method renders the input form field for the contentshelf_store_id option.
 */
function contentshelf_store_id_field() {
    $input = func_get_args();
    $options = get_option('contentshelf_plugin_options');
    $value = isset($options['contentshelf_store_id']) ? $options['contentshelf_store_id'] : '';
    echo "<input id='contentshelf_store_id' name='contentshelf_plugin_options[contentshelf_store_id]' size='40' type='text' value='{$value}' />";
}

/*
 * @method contentshelf_store_url_field
 *
 * This method renders the input form field for the contentshelf_store_url option.
 */
function contentshelf_store_url_field() {
    $input = func_get_args();
    $options = get_option('contentshelf_plugin_options');
    $value = isset($options['contentshelf_store_url']) ? $options['contentshelf_store_url'] : '';
    echo "<input id='contentshelf_store_url' name='contentshelf_plugin_options[contentshelf_store_url]' size='40' type='text' value='{$value}' />";
}

/*
 * @method contentshelf_show_cart_count_field
 *
 * This method renders the input form field for the contentshelf_show_cart_count option.
 */
function contentshelf_show_cart_count_field() {
    $input = func_get_args();
    $options = get_option('contentshelf_store_options');
    $checked =  empty( $options['contentshelf_show_cart_count'] ) ? '' : "checked='checked'";
    if ( ! isset( $options['contentshelf_show_cart_count'] ) ) $checked = "checked='checked'";
    echo "<input id='contentshelf_show_cart_count' name='contentshelf_store_options[contentshelf_show_cart_count]' type='checkbox' value='1' {$checked} />";
}
/*
 * @method contentshelf_show_language_field
 *
 * This method renders the input form field for the contentshelf_show_language option.
 */
function contentshelf_show_language_field() {
    $input = func_get_args();
    $options = get_option('contentshelf_store_options');
    $checked =  empty( $options['contentshelf_show_language'] ) ? '' : "checked='checked'";
    if ( ! isset( $options['contentshelf_show_language'] ) ) $checked = "checked='checked'";
    echo "<input id='contentshelf_show_language' name='contentshelf_store_options[contentshelf_show_language]' type='checkbox' value='1' {$checked} />";
}
/*
 * @method contentshelf_show_search_field
 *
 * This method renders the input form field for the contentshelf_show_search option.
 */
function contentshelf_show_search_field() {
    $input = func_get_args();
    $options = get_option('contentshelf_store_options');
    $checked =  empty( $options['contentshelf_show_search'] ) ? '' : "checked='checked'";
    if ( ! isset( $options['contentshelf_show_search'] ) ) $checked = "checked='checked'";
    echo "
        <input id='contentshelf_show_search' name='contentshelf_store_options[contentshelf_show_search]' type='checkbox' value='1' {$checked} />";
}

/*
 * @method contentshelf_general_settings_do_page
 *
 * This method renders the Plugin Setup form for the Plugin Page link.
 */
function contentshelf_general_settings_do_page() {
    require_once('contentshelf-plugin-setup-form.php');
}

/*
 * @method contentshelf_plugin_setup
 *
 * This method renders the Plugin Setup form for the Content Shelf menu link.
 */
function contentshelf_plugin_setup() {
    require_once('contentshelf-plugin-setup-form.php');
}

/*
 * @method contentshelf_store_settings
 *
 * This method renders the Store Settings form for the Content Shelf menu link.
 */
function contentshelf_store_settings() {
    require_once('contentshelf-store-settings-form.php');
}

/*
 * @method contentshelf_admin_init
 *
 * This provides the settings sections and fields for the Plugin when the admin
 * interface is initialized.
 */
function contentshelf_admin_init() {
    register_setting( 'contentshelf_plugin_options', 'contentshelf_plugin_options', 'contentshelf_options_validate' );
    register_setting( 'contentshelf_store_options', 'contentshelf_store_options', 'contentshelf_options_validate' );

    add_settings_section('contentshelf_plugin_setup', 'Plugin Setup', 'contentshelf_plugin_setup', 'contentshelf_plugin_setup');
    add_settings_section('contentshelf_store_settings', 'Store Plugin Settings', 'contentshelf_store_settings', 'contentshelf_store_settings');

    // This is a hidden setup option to indicate wheter the initial setup has been completed.
    add_settings_field('contentshelf_store_id', 'Store ID', 'contentshelf_store_id_field', 'contentshelf_plugin_setup', 'contentshelf_plugin_setup');
    add_settings_field('contentshelf_store_url', 'Store URL', 'contentshelf_store_url_field', 'contentshelf_plugin_setup', 'contentshelf_plugin_setup');


    // These are settings that may be changed after the initial setup.
    add_settings_field('contentshelf_show_search', 'Search Widget', 'contentshelf_show_search_field', 'contentshelf_store_settings', 'contentshelf_store_settings');
    add_settings_field('contentshelf_show_cart_count', 'Cart Count Widget', 'contentshelf_show_cart_count_field', 'contentshelf_store_settings', 'contentshelf_store_settings');
    add_settings_field('contentshelf_show_language', 'Language Widget', 'contentshelf_show_language_field', 'contentshelf_store_settings', 'contentshelf_store_settings');

    $defaults = array(
        'contentshelf_show_cart_count' => 1,
        'contentshelf_show_language' => 1,
        'contentshelf_show_search' => 1,
    );
}

/*
 * @method contentshelf_options_add_page
 *
 * This method registers the Content Shelf menu and the page handlers for the associated menu-items.
 */
function contentshelf_options_add_page() {
    $menu_icon_file = basename(CONTENTSHELF_PLUGIN_DIR) . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'icon-sidebar-default.png';
    $menu_icon = plugins_url($menu_icon_file, 'contentshelf-shopping-cart');
    add_menu_page(
        __('Content Shelf', 'contentshelf'),
        __('Content Shelf', 'contentshelf'),
        'manage_options',
        'contentshelf',
        'contentshelf_general_settings_do_page',
        $menu_icon
    );

    add_submenu_page(
        'contentshelf',
        __('Plugin Setup', 'contentshelf-plugin-setup'),
        __('Plugin Setup', 'contentshelf-plugin-setup'),
        'manage_options',
        'contentshelf',
        'contentshelf_plugin_setup',
        'none'
    );

    add_submenu_page(
        'contentshelf',
        __('Store Plugin Settings', 'contentshelf'),
        __('Plugin Settings', 'contentshelf'),
        'manage_options',
        'contentshelf-store-settings',
        'contentshelf_store_settings',
        'none'
    );
}

/*
 * @method contentshelf_register_admin_styles
 *
 * This method tells Wordpress to add the Admin CSS to the respective page headers when called.
 */
function contentshelf_register_admin_styles($hook_suffix) {
    $css_file_tpl = basename(CONTENTSHELF_PLUGIN_DIR) . DIRECTORY_SEPARATOR . 'css' . 'contentshelf-admin.css';
    $css_file = plugins_url($css_file_tpl, 'contentshelf-shopping-cart');
    wp_enqueue_style('contentshelf-admin-css', $css_file, array(), CONTENTSHELF_PLUGIN_VERSION);
}

/*
 * @method contentshelf_register_admin_scripts
 *
 * This method tells Wordpress to add the Admin Javascript to the respective page headers when called.
 */
function contentshelf_register_admin_scripts($hook_suffix) {
    $js_file_tpl = basename(CONTENTSHELF_PLUGIN_DIR) . DIRECTORY_SEPARATOR . 'js' . 'contentshelf-admin.js';
    $js_file = plugins_url($js_file_tpl, 'contentshelf-shopping-cart');
    wp_enqueue_script('contentshelf-admin-js', $js_file, array(), CONTENTSHELF_PLUGIN_VERSION);
}

/*
 * @method contentshelf_sidebar_widgets_init
 *
 * This method registers the available Content Shelf widgets so they will be available to select for sidebars.
 */
function contentshelf_sidebar_widgets_init() {
    $store_options = get_option('contentshelf_store_options');
    $show_cart_count = isset($store_options['contentshelf_show_cart_count']) ? ( (int) $store_options['contentshelf_show_cart_count'] ) : false;
    $show_language = isset($store_options['contentshelf_show_language']) ? ( (int) $store_options['contentshelf_show_language'] ) : false;
    $show_search = isset($store_options['contentshelf_show_search']) ? ( (int) $store_options['contentshelf_show_search'] ) : false;

    register_widget('ContentShelfCartCountWidget');
    register_widget('ContentShelfLanguageWidget');
    register_widget('ContentShelfSearchWidget');
}

/*
 * @method contentshelf_init
 *
 * This method does the work to initialize the plugin environment..
 */
function contentshelf_init() {
    $error = false;
    $store_dir = get_contentshelf_store_dir();
    $log_dir = get_contentshelf_log_dir();

    if ( is_admin() ) {
        if ( empty($error) && ! file_exists($log_dir) ) {
            if ( ! wp_mkdir_p($log_dir) ) {
                $error = true;
            }
        }
        /*
        if ( empty($error) && ! file_exists($store_dir) ) {
            if ( ! wp_mkdir_p($store_dir) ) {
                $error = true;
            }
        }
        */
    }

    contentshelf_add_store_page();
}

/*
 * @method contentshelf_activation
 *
 * This method does the work to setup the plugin upon activation.
 */
function contentshelf_activation() {
    contentshelf_init();
}

/*
 * @method contentshelf_deactivation
 *
 * This method does the work to cleanup the plugin upon deactivation.
 */
function contentshelf_deactivation() {
    contentshelf_delete_store_page();
}

/*
 * @method contentshelf_uninstall
 *
 * This method does the work to remove the plugin for uninstalls.
 */
function contentshelf_uninstall() {
    $error = false;
    $store_dir = get_contentshelf_store_dir();
    $log_dir = get_contentshelf_log_dir();

    delete_option("contentshelf_auto_activated");
    delete_option( 'contentshelf_plugin_options' );
    delete_option( 'contentshelf_store_options' );
    unregister_widget( 'ContentShelfCartCountWidget' );
    unregister_widget( 'ContentShelfLanguageWidget' );
    unregister_widget( 'ContentShelfSearchWidget' );

    if ( is_admin() ) {
        if ( empty($error) && file_exists($store_dir) ) {
            if ( ! rmdir($store_dir, true) ) {
                $error = true;
            }
        }
        if ( empty($error) && file_exists($log_dir) ) {
            if ( ! rmdir($log_dir, true) ) {
                $error = true;
            }
        }
    }
}

/*
 * Reigistation of the handlers for activation, deactivation, and uninstall.
 */
register_activation_hook( __FILE__, 'contentshelf_activation' );
register_deactivation_hook( __FILE__, 'contentshelf_deactivation' );
register_uninstall_hook( __FILE__, 'contentshelf_uninstall' );

/*
 * Reigistation of the init handlers and filters.
 */
add_action('admin_init', 'contentshelf_admin_init' );
add_action('admin_init', 'contentshelf_sidebar_widgets_init');

add_action('admin_menu', 'contentshelf_options_add_page' );
add_action('admin_menu', 'contentshelf_sidebar_widgets_init' );

// Reregister/Unregister based on deltas in settings.
add_action('widgets_init', 'contentshelf_sidebar_widgets_init');

add_filter( 'plugin_action_links_' . plugin_basename(__FILE__), 'contentshelf_add_action_links' );

/*
 * Shortcode handler registrations.
 */
// Needs to be in both front-end and back-end to allow the admin zone to recognize shortcode(s).
add_shortcode('contentshelf', 'contentshelf_shortcode');
add_shortcode( 'contentshelf_cart_count', 'contentshelf_cart_count_shortcode' );
add_shortcode( 'contentshelf_categories', 'contentshelf_categories_shortcode' );
add_shortcode( 'contentshelf_language', 'contentshelf_language_shortcode' );
add_shortcode( 'contentshelf_search', 'contentshelf_search_shortcode' );
add_shortcode( 'contentshelf_store', 'contentshelf_store_shortcode' );
add_shortcode( 'contentshelf_store_page', 'contentshelf_store_page_shortcode' );
